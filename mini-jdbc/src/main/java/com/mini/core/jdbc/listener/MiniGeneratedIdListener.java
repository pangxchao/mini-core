package com.mini.core.jdbc.listener;

import com.mini.core.jdbc.MiniRepositoryOld;
import com.mini.core.util.holder.FieldHolder;
import org.jetbrains.annotations.NotNull;
import org.springframework.context.event.EventListener;
import org.springframework.data.annotation.Id;
import org.springframework.data.relational.core.conversion.DbAction;
import org.springframework.data.relational.core.mapping.event.BeforeSaveEvent;
import org.springframework.stereotype.Component;

import static com.mini.core.util.PKGenerator.id;
import static com.mini.core.util.PKGenerator.uuid;
import static com.mini.core.util.holder.ClassHolder.create;

@Component
public class MiniGeneratedIdListener {

    @EventListener
    @SuppressWarnings("DuplicatedCode")
    public void beforeSaveEventHandler(@NotNull BeforeSaveEvent<?> beforeSaveEvent) {
        beforeSaveEvent.getAggregateChange().forEachAction(action -> {
            if (!(action instanceof DbAction.WithGeneratedId<?>)) {
                return;
            }
            Object entity = ((DbAction.WithGeneratedId<?>) action).getEntity();
            create(action.getEntityType()).getFields().values().forEach(field -> {
                // 获取是否为ID并且判断是否为新增数据
                final Id id = field.getAnnotation(Id.class);
                if (id == null || !isNew(entity, field)) {
                    return;
                }
                if (String.class == field.getType()) {
                    field.setValue(entity, uuid());
                    return;
                }
                if (Long.class == field.getType()) {
                    field.setValue(entity, id());
                    return;
                }
                if (long.class == field.getType()) {
                    field.setValue(entity, id());
                }
            });
        });
    }

    @EventListener
    @SuppressWarnings("DuplicatedCode")
    public void miniGeneratedIdHandler(MiniRepositoryOld.MiniId miniId) {
        final java.lang.Object entity = miniId.getSource();
        final FieldHolder<?> field = miniId.getField();
        // 获取是否为ID并且判断是否为新增数据
        final Id id = field.getAnnotation(Id.class);
        if (id == null || !isNew(entity, field)) {
            return;
        }

        if (String.class == field.getType()) {
            field.setValue(entity, uuid());
            return;
        }
        if (Long.class == field.getType()) {
            field.setValue(entity, id());
            return;
        }
        if (long.class == field.getType()) {
            field.setValue(entity, id());
        }
    }

    @EventListener
    @SuppressWarnings("DuplicatedCode")
    public void miniAutoGeneratedIdHandler(MiniRepositoryOld.AutoMiniId miniId) {
        if (miniId.getHolder() == null || miniId.getHolder().getKey() == null) {
            return;
        }
        create(miniId.getType()).getFields().values().forEach(field -> {
            final java.lang.Object entity = miniId.getSource();
            // 获取是否为ID并且判断是否为新增数据
            final Id id = field.getAnnotation(Id.class);
            if (id == null || !isNew(entity, field)) {
                return;
            }

            Number value = miniId.getHolder().getKey();
            if (Long.class == field.getType()) {
                field.setValue(entity, value);
                return;
            }
            if (long.class == field.getType()) {
                field.setValue(entity, value);
                return;
            }
            if (Integer.class == field.getType()) {
                field.setValue(entity, value);
                return;
            }
            if (int.class == field.getType()) {
                field.setValue(entity, value);
            }
        });
    }

    @SuppressWarnings("BooleanMethodIsAlwaysInverted")
    protected boolean isNew(Object entity, FieldHolder<?> field) {
        Object object = field.getValue(entity);
        if (object == null) return true;

        if (object instanceof Number) {
            Number n = (Number) object;
            return n.longValue() == 0L;
        }
        return false;
    }
}
